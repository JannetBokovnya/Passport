using System;
using System.Collections.ObjectModel;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using Media;
using Media.Interfaces;
using Passpot.Business;
using Passpot.Controls;
using System.Windows.Shapes;
using System.Windows.Browser;
using System.Collections.Generic;
using Media.Resources;
using Services.ServiceReference;
using Telerik.Windows.Controls;
using ListBoxItem = System.Windows.Controls.ListBoxItem;

namespace Passpot
{


    public partial class MainView : UserControl
    {
        private string rootKey = "3";
        private string keyPassportFromOut = "";
        public string visibleShema = "2";
        public string tsdiagram = "";
        public string tsobject = "";
        private ServiceDataClient _serviceDataClient;
        private string returnKey = "1";
        public string keyEntityFromOut = "";
        public string flagurl = "";
        private string keyPressed = "";
        string CR = "\r\n";
        private ChildWindowAttantion _popupWindowAttantion;
        private static string sjason = "";
        public static double _height = 0;

        protected ServiceDataClient ServiceDataClient
        {
            get
            {
                if (_serviceDataClient == null)
                    _serviceDataClient = new ServiceDataClient();
                return _serviceDataClient;
            }
        }
        public MainModel Model
        {
            get { return DataContext as MainModel; }
        }


        [ScriptableMember()]
        public static void ApplicationLoaded()
        {
            HtmlPage.Window.Invoke("applicationLoaded");
        }


        [ScriptableMember()]
        public void getCurrentState()
        {
            //TODO: вызвать механизм сохранения состояния

            SaveZakl_Jason();
            SetCurrentState(Model.stringJason);

        }

        public static void SetCurrentState(string p_cValue)
        {
            HtmlPage.Window.Invoke("setCurrentState", p_cValue);
        }

        [ScriptableMember()]
        public static void sendEvent(string in_EventName, string in_Params, string in_NameAttr)
        {
            HtmlPage.Window.Invoke("sendEvent", in_EventName, in_Params, in_NameAttr);

        }

        [ScriptableMember()]
        public void receiveEvent(string in_EventName, string in_Params)
        {

            try
            {
                Model.Report("receiveEvent = " + in_EventName + " in_Params" + in_Params);

                switch (in_EventName)
                {
                    case "SHOW_PASSPORT":
                        {
                            if (!String.IsNullOrEmpty(in_Params))
                            {
                                SenderWindow sw = JsonHelper.JsonDeserialize<SenderWindow>(in_Params);
                                if (!String.IsNullOrEmpty(sw.EventParam.NOBJKEY))
                                {
                                   
                                    //добавлено показ дерева до объекта
                                    //PanelTree.Children.Clear();
                                    //Model.Report("receiveEvent, TreeControl.CreateTree(sw.EventParam.NOBJKEY "+ sw.EventParam.NOBJKEY);
                                    //rootKey = sw.EventParam.NOBJKEY;
                                    //PanelTree.Children.Add(TreeControl.CreateTree(rootKey, "2"));
                                    //Model.Report("receiveEvent, PassportDetailOpenParam PassportKey=" +
                                    //             sw.EventParam.NOBJKEY);
                                    //Model.NeedOpenPassportDetail = new PassportDetailOpenParam() { PassportKey = sw.EventParam.NOBJKEY, IsEditedPassport = 1 };



                                    //добавлено показ дерева до объекта
                                    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                    //пока закоментировано!!!!!!!!!!!
                                    //PanelTree.Child = null;
                                    //Model.Report("receiveEvent, TreeControl.CreateTree(sw.EventParam.NOBJKEY " + sw.EventParam.NOBJKEY);
                                    //rootKey = sw.EventParam.NOBJKEY;
                                    //PanelTree.Child = (TreeControl.CreateTree(rootKey, "2"));
                                    //Model.Report("receiveEvent, PassportDetailOpenParam PassportKey=" +
                                    //             sw.EventParam.NOBJKEY);
                                    ////Model.NeedOpenPassportDetail = new PassportDetailOpenParam() { PassportKey = sw.EventParam.NOBJKEY, IsEditedPassport = 1};

                                    //var passportDetailOpenParam = new PassportDetailOpenParam() { PassportKey = sw.EventParam.NOBJKEY, IsEditedPassport = 1 };
                                    //ShowPassportDetailView(passportDetailOpenParam);
                                    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                    //keyPassportFromOut = sw.EventParam.NOBJKEY;
                                    //ServiceDataClient.ReturnAccessObjCompleted += ReturnAccessObjCompleted;
                                    //ServiceDataClient.ReturnAccessObjAsync(keyPassportFromOut, GlobalContext.Context);

                                    Model.NeedOpenPassportDetail = new PassportDetailOpenParam() { PassportKey = sw.EventParam.NOBJKEY, IsVisibleButtonTransit = 1 };
                                    //findKeyOnTree = new FindKeyOnTree(Model.PassportOpenParams.EntityKey);
                                    Model.FirePropertyChanged("FindTreeOnkeyPassport");


                                }
                                if (!String.IsNullOrEmpty(sw.EventParam.ENTITYKEY))
                                {
                                    //открываем списочную форму
                                   
                                    var passporOpenParam = new PassportOpenParam()
                                    {
                                        EntityKey = sw.EventParam.ENTITYKEY,
                                        ParentKey = "-1",
                                        IsShowAllField = true,
                                        IsShowTreeOnFindkey = true
                                    };
                                    ShowPassportView(passporOpenParam);
                                }
                            }

                            break;
                        }
                    case "SHOW_PASSPORT_SGR":
                        {
                            if (!String.IsNullOrEmpty(in_Params))
                            {
                                 SenderWindow sw = JsonHelper.JsonDeserialize<SenderWindow>(in_Params);
                                if (!String.IsNullOrEmpty(sw.EventParam.NOBJKEY))
                                {
                                    rootKey = "-1";
                                    PanelTree.Child = null;
                                    //radpane.IsPinned = false;
                                   // radpane.IsHidden = true;

                                    Model.NeedOpenPassportDetail = new PassportDetailOpenParam() { PassportKey = sw.EventParam.NOBJKEY, IsVisibleButtonTransit = 1 };
                                    Model.FirePropertyChanged("FindTreeOnkeyPassport");
                                }

                            }
                           break; 
                        }
                    case "LOAD_STATE":
                        {
                            if (!String.IsNullOrEmpty(in_Params))
                            {
                                //Model.stringJason = "";
                                //Model.stringJason = in_Params;
                                //ReadZakl(Model.stringJason);
                                ReadZakl(in_Params);
                            }

                            break;
                        }
                    default:
                        break;
                }
            }
            catch (Exception ex)
            {

                Model.Report(ex.Message);
            }
            //receiveMsg.Text = "EventName=" + in_EventName + "; Params=" + in_Params;
        }


        public MainView()
        {
           
            InitializeComponent();

            //локализация для всех гридов телерик - подключаем локализацию
            LocalizationManager.DefaultResourceManager = ProjectResources.ResourceManager;

            HtmlPage.RegisterScriptableObject("Page", this);
            //если вызов из "толстого" клиента(не через эвент) то обрабатываем флаг!!!(он = 0)
            Dictionary<string, string> urlparams =
            HtmlPage.Document.QueryString as Dictionary<string, string>;
            ////показывает или дерево объектов или дерево классификатора 
            //keyPassportFromOut = "64390103";
            ReturnParam(urlparams);
            
        }

        private void ReturnParam(Dictionary<string, string> getparams)
        {
            foreach (KeyValuePair<string, string> pair in getparams)
            {

                if (pair.Key == "tree")
                {
                    rootKey = pair.Value;


                    //s = s + string.Format("Key {0} Value {1}", pair.Key, pair.Value);
                    //textBlock.Text = s;
                    //break;
                }
               
                if (pair.Key == "key")
                {
                    keyPassportFromOut = pair.Value;
                }

                if (pair.Key == "embed")
                {
                    visibleShema = pair.Value;

                }

                //получение ключей из аркгиса (из схему), получаю ключи и из них получаю ключ паспорта
                if (pair.Key == "tsdiagram")
                {
                    tsdiagram = pair.Value;
                }

                if (pair.Key == "tsobject")
                {
                    tsobject = pair.Value;
                }

                //получение ключа ентити из строки - по нему строится таблица
                if (pair.Key == "keyEntity")
                {
                    keyEntityFromOut = pair.Value;
                }
                //получение флага загрузки(через эвент или через урл)
                if (pair.Key == "flagurl")
                {
                    flagurl = pair.Value;
                }

            }
            //для построения дерева 1-общее дерево, 2- частное дерева для одного объекта

        }

        private void OnLoaded(object sender, RoutedEventArgs e)
        {
            Model.PropertyChanged += MainModelPropertyChanged;
            //GlobalContext.Context = "10";

            ServiceDataClient.LogVisibleCompleted += ServiceDataClient_LogVisibleCompleted;
            ServiceDataClient.LogVisibleAsync(GlobalContext.Context);

            

            //пока ЗАКОМЕНТИРОВАНО!!!
            //ФУНКЦИЯ НЕ СДЕЛАНА
            ServiceDataClient.GetDisplayLabelsCompleted += (ServiceDataClient_GetDisplayLabelsCompleted);
            ServiceDataClient.GetDisplayLabelsAsync(GlobalContext.Context);
           // Model.Report(" ФУНКЦИЯ НЕ СДЕЛАНА - GetDisplayLabels - ServiceDataClient_GetDisplayLabels-" );

            Model.Report("MainView.OnLoaded + вызываем ApplicationLoaded()");


            if (flagurl == "")
            {
                Model.Report("MainView.OnLoaded - загружаем LoadOnEvent()");
                LoadOnEvent();
            }
            //посылаем сообщение, что форма создана!!!
            ApplicationLoaded();

        }
        void ServiceDataClient_GetDisplayLabelsCompleted(object sender, GetDisplayLabelsCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                
            }
            else
            {
                if (e.Result.IsValid)
                {
                    for (int i = 0; i < e.Result.DisplayLabelsItemList.Count; i++)
                    {
                        DisplayLabel.Dict.Add(e.Result.DisplayLabelsItemList[i].Сplace,
                                              e.Result.DisplayLabelsItemList[i].Сvalue);
                    }

                    if (DisplayLabel.Dict.ContainsKey("ObjectTreeFrame"))
                    {
                       // radpane.Header = DisplayLabel.Dict["ObjectTreeFrame"];
                    }

                    Model.FirePropertyChanged("DisplayLabel");
                }
                else
                {
                    Model.Report("ServiceDataClient_GetDisplayLabels-"+ e.Result.ErrorMessage);
                }
            }

           
        }

        void ServiceDataClient_LogVisibleCompleted(object sender, LogVisibleCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                // code.SessionEnd.Redirect();
            }
            else
            {
                ServiceDataClient.LogVisibleCompleted -= ServiceDataClient_LogVisibleCompleted;
                if (e.Result.IsValid)
                {
                    if (e.Result.LogOnVisible_result.LogOnVisible == "0")
                        passportForm.RowDefinitions[1].Height = new GridLength(0);
                }
                else
                {
                    Model.Report("Ошибка закрытия сообщения  err = " + e.Result.ErrorMessage);

                }
            }
        }

       
        //  25056

        private void LoadOnEvent()
        {
            //busyIndicatorTree1.IsBusy = true;


            if (keyPassportFromOut != "")
            {
                ServiceDataClient.ReturnAccessObjCompleted += ReturnAccessObjCompleted;
                ServiceDataClient.ReturnAccessObjAsync(keyPassportFromOut, GlobalContext.Context);
            }
            else
            {
                if (flagurl == "1")
                {
                    new ButtonOnTollbar() { KeyTollBarButton = "0" };
                    if (keyPassportFromOut != "")
                    {

                        var passportDetailOpenParam = new PassportDetailOpenParam() { PassportKey = keyPassportFromOut };
                        ShowPassportDetailView(passportDetailOpenParam);
                    }
                    if (tsdiagram != "" && tsobject != "")
                    {
                        ServiceDataClient.ReturnKeyObjOnShemaCompleted += OnReturnKeyObjOnShema;
                        ServiceDataClient.ReturnKeyObjOnShemaAsync(tsdiagram, tsobject, GlobalContext.Context);
                    }

                    if (keyEntityFromOut != "")
                    {

                        var passporOpenParam = new PassportOpenParam() { EntityKey = keyEntityFromOut, ParentKey = "-1", IsShowAllField = true, IsShowTreeOnFindkey = true };
                        ShowPassportView(passporOpenParam);

                    }
                    if (flagurl != "1")
                    {

                    }
                }
                else
                {

                    if (keyEntityFromOut != "")
                    {

                        var passporOpenParam = new PassportOpenParam() { EntityKey = keyEntityFromOut, ParentKey = "-1", IsShowAllField = true, IsShowTreeOnFindkey = true };
                        ShowPassportView(passporOpenParam);

                    }
                    new ButtonOnTollbar() { KeyTollBarButton = "1" };
                    if (keyPassportFromOut != "")
                    {
                        if (rootKey == "4")
                        {
                            //!!!!!!!!!!!!!!!!!!!!!!!!!!!
                            //PanelTree.Children.Clear();
                            //PanelTree.Children.Add(TreeControl.CreateTree(rootKey, "2"));
                            PanelTree.Child=null;
                            PanelTree.Child = (TreeControl.CreateTree(rootKey, "2"));
                        }
                        if (rootKey == "3")
                        {
                            //PanelTree.Children.Clear();
                            //PanelTree.Children.Add(TreeControl.CreateTree(keyPassportFromOut, "2"));
                            PanelTree.Child = null;
                            PanelTree.Child = (TreeControl.CreateTree(keyPassportFromOut, "2"));
                        }
                        if (rootKey == "-1")
                        {
                            //PanelTree.Children.Clear();
                            PanelTree.Child = null;
                            //radpane.IsPinned = false;
                           // radpane.IsHidden = true;

                        }

                        var passportDetailOpenParam = new PassportDetailOpenParam() { PassportKey = keyPassportFromOut };
                        ShowPassportDetailView(passportDetailOpenParam);

                    }
                    else
                    {
                        if (rootKey == "-1")
                        {
                            //PanelTree.Children.Clear();
                            PanelTree.Child=null;
                           // radpane.IsPinned = false;
                          //  radpane.IsHidden = true;


                        }
                        else
                        {
                            if (rootKey == "3")
                            {
                                //!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                //PanelTree.Children.Clear();
                                //Model.Report("ModelView.LoadOnEvent TreeControl.CreateTree(rootKey=" + rootKey);
                                //PanelTree.Children.Add(TreeControl.CreateTree(rootKey, "1"));  
                                PanelTree.Child=null;
                                Model.Report("ModelView.LoadOnEvent TreeControl.CreateTree(rootKey=" + rootKey);
                                PanelTree.Child = (TreeControl.CreateTree(rootKey, "1")); 
                            }
                            

                        }

                    }
                }
            }

           
        }

        void ReturnAccessObjCompleted(object sender, ReturnAccessObjCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                //code.SessionEnd.Redirect();
            }
            else
            {
                ServiceDataClient.ReturnAccessObjCompleted -= ReturnAccessObjCompleted;
                if (e.Result.IsValid)
                {
                    if (e.Result.AccessLevel_OnKey_result.AccessLevel == "0")
                    {
                        //пор просьбе трудящихся убрано
                        //_popupWindowAttantion = new ChildWindowAttantion();
                        //_popupWindowAttantion.titleBox.Text =
                        //    //" Обьекты данного типа не найдены, либо у вас отсутсвуют права на их просмотр. в случае производственной необходимости обратитесь к администртору! ";
                        //    "Паспорта на объекты данного типа в системе отсутствуют";
                        //_popupWindowAttantion.Show();


                        //sendEvent("AccessError","","");
                        //HtmlPage.Window.Navigate(new Uri("`/AccessError.aspx"));
                    }
                    else
                    {
                        if (flagurl == "1")
                        {
                            new ButtonOnTollbar() { KeyTollBarButton = "0" };
                            if (keyPassportFromOut != "")
                            {

                                var passportDetailOpenParam = new PassportDetailOpenParam() { PassportKey = keyPassportFromOut };
                                ShowPassportDetailView(passportDetailOpenParam);
                            }
                            if (tsdiagram != "" && tsobject != "")
                            {
                                ServiceDataClient.ReturnKeyObjOnShemaCompleted += OnReturnKeyObjOnShema;
                                ServiceDataClient.ReturnKeyObjOnShemaAsync(tsdiagram, tsobject, GlobalContext.Context);
                            }

                            if (keyEntityFromOut != "")
                            {

                                var passporOpenParam = new PassportOpenParam()
                                                           {
                                                               EntityKey = keyEntityFromOut,
                                                               ParentKey = "0",
                                                               IsShowAllField = true,
                                                               IsShowTreeOnFindkey = true
                                                           };
                                ShowPassportView(passporOpenParam);

                            }
                            if (flagurl != "1")
                            {
                                new ButtonOnTollbar() { KeyTollBarButton = "0" };
                            }
                        }
                        else
                        {
                            new ButtonOnTollbar() { KeyTollBarButton = "1" };
                            if (keyPassportFromOut != "")
                            {
                                if (rootKey == "4")
                                {
                                    //!!!!!!!!!!!!!!!!
                                    //PanelTree.Children.Clear();
                                    //PanelTree.Children.Add(TreeControl.CreateTree(rootKey, "1"));
                                    PanelTree.Child=null;
                                    PanelTree.Child = (TreeControl.CreateTree(rootKey, "1"));
                                }
                                if (rootKey == "3")
                                {
                                    //!!!!!!!!!!!!!!
                                    //PanelTree.Children.Clear();
                                    //PanelTree.Children.Add(TreeControl.CreateTree(keyPassportFromOut, "2"));
                                    PanelTree.Child=null;
                                    PanelTree.Child = (TreeControl.CreateTree(keyPassportFromOut, "2"));
                                }
                                if (rootKey == "-1")
                                {
                                    //PanelTree.Children.Clear();
                                    PanelTree.Child = null;
                                    //radpane.IsPinned = false;
                                   // radpane.IsHidden = true;

                                }


                                var passportDetailOpenParam = new PassportDetailOpenParam() { PassportKey = keyPassportFromOut };
                                ShowPassportDetailView(passportDetailOpenParam);

                            }
                            else
                            {
                                //!!!!!!!!!!!!!!!!!!!!!
                                //PanelTree.Children.Clear();
                                //PanelTree.Children.Add(TreeControl.CreateTree(rootKey, "1"));
                                PanelTree.Child = null;
                                PanelTree.Child = (TreeControl.CreateTree(rootKey, "1"));
                            }
                        }
                    }
                }
                else
                {
                    Model.Report("MainView.ReturnAccessObjCompleted  Ошибка при получении доступа к объекту!!!" +
                                 e.Result.ErrorMessage);
                }
            }
        }

        void OnReturnKeyObjOnShema(object sender, ReturnKeyObjOnShemaCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                //code.SessionEnd.Redirect();
            }
            else
            {
                ServiceDataClient.ReturnKeyObjOnShemaCompleted -= OnReturnKeyObjOnShema;

                if (e.Result.IsValid)
                {

                    if (e.Result.KeyonShema_result.KeyonShema_arcgis == "")
                    {
                        Model.Report("Ключ паспорта со схемы не получен!!!");
                    }
                    else
                    {
                        var passportDetailOpenParam = new PassportDetailOpenParam() { PassportKey = e.Result.KeyonShema_result.KeyonShema_arcgis };
                        ShowPassportDetailView(passportDetailOpenParam);
                    }

                }
                else
                {
                    Model.Report("MainView.OnReturnKeyObjOnShema  Ключ паспорта со схемы не получен, ошибка!!!" +
                                 e.Result.ErrorMessage);
                }
            }
        }



        /// <summary>
        /// Обработчик сообщений PropertyChanged(когда произойдет событие PropertyChanged,
        /// то обработчик будет выполнен)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MainModelPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName == "NeedOpenPassportDetail")
            {
                //открываем форму PassportDetailView и передаем в качестве аргумента значение свойства
                //модели NeedOpenPassportDetail в котором содержится ключ паспорта
                ShowPassportDetailView(Model.NeedOpenPassportDetail);
            }
            else if (e.PropertyName == "NeedOpenPassport")
            {
                ShowPassportView(Model.NeedOpenPassport);
            }
            else if (e.PropertyName == "ClosePassportDetal")
            {
                contentHolder2.Child = null;
               // Model.FirePropertyChanged("ModelInited");
                ShowPassportView(Model.NeedOpenPassport);
               
            }
           
        }

        private void ShowPassportView(PassportOpenParam passportOpenParam)
        {
            contentHolder2.Child = null;

            var passportView = new PassportView();
            var passportModel = new PassportModel(Model);
            passportModel.visiblebutonShema = visibleShema;
            passportView.DataContext = passportModel;

            contentHolder.Child = passportView;
            //spGridDataTabItem.Children.Add(passportView);
            passportModel.InitModel(passportOpenParam);

            //(passportOpenParam.EntityKey);

        }

        private void ShowPassportDetailView(PassportDetailOpenParam passportDetailOpenParam)
        {
            var passportDetailView = new PassportDetailView();
            var detailModel = new PassportDetailModel(Model);
            detailModel.visiblebutonShema = visibleShema;
            detailModel.VisibleChildTabItem = rootKey;
            passportDetailView.DataContext = detailModel;
            contentHolder2.Child = passportDetailView;

            //инициируем модель просмотра паспорта
            detailModel.InitModel(passportDetailOpenParam);
        }
        

        private void reportListBox_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if ((keyPressed + e.Key.ToString()) == "CtrlC")
            {
                string s = string.Empty;
                foreach (var _item in reportListBox.SelectedItems)
                {
                    //string ss = _item.ToString();
                    //System.Windows.Controls.ListBoxItem lbitem = new ListBoxItem();
                    // lbitem = _item as System.Windows.Controls.ListBoxItem;
                    //s = s + (string)lbitem.Content + CR;

                    s = s + _item.ToString() + CR;
                }

                System.Windows.Clipboard.SetText(s);
                keyPressed = "";

            }
            else
            {
                keyPressed = e.Key.ToString();
            }
        }

        public void SaveZakl_Jason()
        {
            SaveVkladka sv = new SaveVkladka();


            if (Model.NeedOpenPassport != null)
            {
                sv.EntityKey = Model.NeedOpenPassport.EntityKey;
                sv.ParentKey = Model.NeedOpenPassport.ParentKey;
                sv.PassportKey = "0";
                sv.EntityName = "";
                sv.PassportName = "";
                string jsonString = JsonHelper.JsonSerializer<SaveVkladka>(sv);
                Model.stringJason = jsonString;
                Model.Report(jsonString);
                sjason = jsonString;
            }
            else
            {
                if (Model.NeedOpenPassportDetail != null)
                {
                    sv.PassportKey = Model.NeedOpenPassportDetail.PassportKey;
                    sv.EntityKey = Model.NeedOpenPassportDetail.EntityKey;
                    sv.EntityName = "Название объекта";
                    sv.ParentKey = "0";
                    sv.PassportName = "Название паспорта";
                    string jsonString = JsonHelper.JsonSerializer<SaveVkladka>(sv);
                    Model.stringJason = jsonString;
                    Model.Report(jsonString);
                }
            }

        }

        private void ReadZakl(string strJason)
        {
            if (strJason != "")
            {
                //SaveVkladka sv = JsonHelper.JsonDeserialize<SaveVkladka>(strJason);
                SenderWindow sw = JsonHelper.JsonDeserialize<SenderWindow>(strJason);
                if (sw.EventParam.PassportKey == "0")
                {
                    Model.NeedOpenPassport = new PassportOpenParam()
                    {
                        EntityKey = sw.EventParam.ENTITYKEY,
                        ParentKey = sw.EventParam.ParentKey,
                        IsShowAllField = true,
                        IsShowTreeOnFindkey = true
                    };
                }
                else
                {
                    Model.NeedOpenPassportDetail = new PassportDetailOpenParam() { PassportKey = sw.EventParam.PassportKey, IsEditedPassport = 0 };
                }
            }
        }

    }

}

//by Gaitov
//Попытка, при изменении размера родительского окна, изменить размер вложенного UserControl(а).
//private void UserControl_SizeChanged(object sender, SizeChangedEventArgs e)
//{
//    //Жанна, тут я как мог играл разными вариантами, но заставить изменять размер вложенного UserControl - не смог..:)
//    //_height = LayoutRoot.ActualHeight;
//    //new TreeControl().ResizeFromMain(_height);
//}
 //private void PassportButton_Click(object sender, RoutedEventArgs e)
 //       {
 //           // ShowPassportView("sdfsd");
 //           //Model.NeedOpenPassport = "sdfsd";
 //           //1446907006 - ключ парента для лупинга!!! - тестовое

 //           //Model.NeedOpenPassport = new PassportOpenParam() { EntityKey = "324", ParentKey = "1446907006", IsShowAllField = true };
 //           //Model.NeedOpenPassport = new PassportOpenParam() { EntityKey = "1204", ParentKey = "1411444509", IsShowAllField = true };
 //           //Model.NeedOpenPassport = new PassportOpenParam() { EntityKey = "1217", ParentKey = "1411444509", IsShowAllField = true };
 //           //магистральный газопровод    54628255
 //           //Model.NeedOpenPassport = new PassportOpenParam() { EntityKey = "54628255", IsShowAllField = true };
 //           //запорная арматура
 //           //Model.NeedOpenPassport = new PassportOpenParam() { EntityKey = "1471", IsShowAllField = true };
 //           //латвия
 //           Model.NeedOpenPassport = new PassportOpenParam() { EntityKey = "25226", IsShowAllField = true };
 //       }
//private void PassportDetailButton_Click(object sender, RoutedEventArgs e)
//        {
//            //ShowPassportDetailView("908918609"  4394372210 499593507 245203      1423922009    1423929709);
//            // Model.NeedOpenPassportDetail = new PassportDetailOpenParam() { PassportKey = "523562107", IsEditedPassport = 1 }; //  "908918609"  245203
//            //латвия 1285103
//            Model.NeedOpenPassportDetail = new PassportDetailOpenParam() { PassportKey = "4510503", IsEditedPassport = 1 }; //  "908918609"  245203

//        }

//private void readZakl_Click(object sender, RoutedEventArgs e)
//        {
//            string tt =

//                "{\"SenderWindow\":\"TECHNOSCHEME\",\"Destination\":[], \"EventParam\": {\"EntityKey\":\"40579\",\"EntityName\":\"Название объекта\",\"ParentKey\":\"0\",\"PassportKey\":\"81233\",\"PassportName\":\"Название паспорта\"} }";
//            // "{\"EntityKey\":\"40579\",\"EntityName\":\"Название объекта\",\"ParentKey\":\"0\",\"PassportKey\":\"81233\",\"PassportName\":\"Название паспорта\"}";
//            ReadZakl(tt);
//        }

//private void SaveZakl_Click(object sender, RoutedEventArgs e)
//        {
//            getCurrentState();
//            //SaveZakl_Jason();

//        }

//public void passportDetailButton_Click_1(object sender, RoutedEventArgs e)
//        {
//            //Model.NeedOpenPassportDetail = new PassportDetailOpenParam() { PassportKey = "1" }; //  "908918609"  245203
//            //если нужно - то восстановить стек панель
//            //PanelTree.Children.Clear();
//            //PanelTree.Children.Add(passportDetailButton2);
//            //эта кнопка нужна для отработки короткого дерева по ключу объекта!!!!!!!! - пока закоментировала
//            //PanelTree.Children.Add(TreeControl.CreateTreeOnObj("63902603"));

//        }

//private string KeyPassportFromOut
//{
//    get
//    {
//       // string _keyPassportFromOut = "";
//    //string txt= HtmlPage.Document.DocumentUri.ToString();

//    //        var KeyArray = txt.Split('?');
//    //        if (KeyArray.Length == 2)
//    //        {

//    //            var KeyValuePairs = KeyArray[1].Split('&');
//    //            for (int i = 0; i < KeyValuePairs.Length; i++)
//    //            {
//    //                string ii = KeyValuePairs[i].ToString();
//    //                int kk = ii.IndexOf('=');
//    //                if (ii.IndexOf('=') != -1)
//    //                {
//    //                    _keyPassportFromOut = ii.Substring(kk + 1);
//    //                }
//    //            }
//    //        }
//         //   return _keyPassportFromOut;
//    }
//}


//case "SHOW_PASSPORT":
//                  {
//                          if (flagurl == "1")
//                          {
//                              {
//                                  if (in_Params != "0")
//                                  {
//                                      Dictionary<string, string> _params = new Dictionary<string, string>();
//                                      string[] arr = in_Params.Split('&');
//                                      for (int i = 0; i < arr.Length; i++)
//                                      {
//                                          string[] key = arr[i].Split('=');
//                                          _params.Add(key[0], key[1]);
//                                      }
//                                      ReturnParam(_params);

//                                  }

//                                  if (keyPassportFromOut != "")
//                                  {

//                                      if (rootKey == "4")
//                                      {
//                                          PanelTree.Children.Clear();
//                                          PanelTree.Children.Add(TreeControl.CreateTree(rootKey, "1"));
//                                      }
//                                      if (rootKey == "3")
//                                      {
//                                          PanelTree.Children.Clear();
//                                          PanelTree.Children.Add(TreeControl.CreateTree(keyPassportFromOut, "2"));
//                                      }
//                                      if (rootKey == "-1")
//                                      {
//                                          PanelTree.Children.Clear();
//                                          radpane.IsPinned = false;
//                                          radpane.IsHidden = true;

//                                      }


//                                  }
//                                  else
//                                  {
//                                      PanelTree.Children.Clear();
//                                      PanelTree.Children.Add(TreeControl.CreateTree(rootKey, "1"));
//                                  }

//                                  LoadOnEvent();
//                              }
//                          }
//                      break;
//                  }

//private void ReturnParam(Dictionary<string, string> getparams)
//        {
//            foreach (KeyValuePair<string, string> pair in getparams)
//            {

//                if (pair.Key == "tree")
//                {
//                    rootKey = pair.Value;
                    

//                    //s = s + string.Format("Key {0} Value {1}", pair.Key, pair.Value);
//                    //textBlock.Text = s;
//                    //break;
//                }

//                if (pair.Key == "key")
//                {
//                    keyPassportFromOut = pair.Value;
//                }

//                if (pair.Key == "embed")
//                {
//                    visibleShema = pair.Value;

//                }

//                //получение ключей из аркгиса (из схему), получаю ключи и из них получаю ключ паспорта
//                if (pair.Key == "tsdiagram")
//                {
//                    tsdiagram = pair.Value;
//                }

//                if (pair.Key == "tsobject")
//                {
//                    tsobject = pair.Value;
//                }

//                //получение ключа ентити из строки - по нему строится таблица
//                if (pair.Key == "keyEntity")
//                {
//                    keyEntityFromOut = pair.Value;
//                }
//                //получение флага загрузки(через эвент или через урл)
//                if (pair.Key == "flagurl")
//                {
//                    flagurl = pair.Value;
//                }


//            }
//            //для построения дерева 1-общее дерево, 2- частное дерева для одного объекта

//        }